use crate::{
    tss_event_model::{TSSData, TSSEventType},
    tss_service::TssService,
};

impl TssService {
    //distributes the msg to the appropriate handler
    pub async fn handle_tss_events(self: &mut Self, tss_gossiped_data: TSSData) {
        match tss_gossiped_data.tss_event_type {
            //nodes will be receiving this event to make participant using params
            TSSEventType::ReceiveParams => {
                self.handler_receive_params(&tss_gossiped_data.tss_data)
                    .await;
            }
            // nodes will receive peer id of other nodes and will add it to their list
            TSSEventType::ReceivePeerIDForIndex => {
                self.handler_receive_peer_id_for_index(&tss_gossiped_data.tss_data)
                    .await;
            }
            //nodes receives peers with collector participants
            TSSEventType::ReceivePeersWithColParticipant => {
                self.handler_receiver_peers_with_col_participant(&tss_gossiped_data.tss_data)
                    .await;
            }
            //nodes will receive participant and will add will go to round one state
            TSSEventType::ReceiveParticipant => {
                self.handler_receive_participant(&tss_gossiped_data.tss_data)
                    .await;
            }
            //nodes will receive their secret share and take state to round two
            TSSEventType::ReceiveSecretShare => {
                self.handler_receive_secret_share(&tss_gossiped_data.tss_data)
                    .await;
            }

            //received commitments of other nodes who are participating in TSS process
            TSSEventType::ReceiveCommitment => {
                self.handler_receive_commitment(&tss_gossiped_data.tss_data)
                    .await;
            }

            //event received by collector and partial sign request is received
            TSSEventType::PartialSignatureGenerateReq => {
                self.handler_partial_signature_generate_req(&tss_gossiped_data.tss_data)
                    .await;
            }

            //received partial signature. threshold signature to be made by aggregator
            TSSEventType::PartialSignatureReceived => {
                self.handler_partial_signature_received(&tss_gossiped_data.tss_data)
                    .await;
            }

            //verify threshold signature generated by aggregator
            TSSEventType::VerifyThresholdSignature => {
                self.handler_verify_threshold_signature(&tss_gossiped_data.tss_data)
                    .await;
            }

            //received resetting tss state request
            TSSEventType::ResetTSSState => {
                self.handler_reset_tss_state(&tss_gossiped_data.tss_data)
                    .await;
            }
        }
    }
}
